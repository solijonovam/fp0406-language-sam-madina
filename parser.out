Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    AGAR
    BOSHQA
    COMMA
    UCHUN

Grammar

Rule 0     S' -> program
Rule 1     program -> statement_list
Rule 2     statement_list -> statement_list statement
Rule 3     statement_list -> statement
Rule 4     statement -> simple_statement SEMICOLON
Rule 5     statement -> SEMICOLON
Rule 6     simple_statement -> PASS
Rule 7     simple_statement -> NAME = expression
Rule 8     simple_statement -> AYT ( expression )
Rule 9     expression -> expression + expression
Rule 10    expression -> expression - expression
Rule 11    expression -> expression * expression
Rule 12    expression -> expression / expression
Rule 13    expression -> expression ^ expression
Rule 14    expression -> - expression
Rule 15    expression -> + expression
Rule 16    expression -> ( expression )
Rule 17    expression -> NUMBER
Rule 18    expression -> DQ_STRING
Rule 19    expression -> SQ_STRING
Rule 20    expression -> NAME
Rule 21    statement -> FUNKTSIYASI NAME statement_block
Rule 22    statement -> YUGUR NAME
Rule 23    statement_block -> { statement_list }

Terminals, with rules where they appear

(                    : 8 16
)                    : 8 16
*                    : 11
+                    : 9 15
-                    : 10 14
/                    : 12
=                    : 7
AGAR                 : 
AYT                  : 8
BOSHQA               : 
COMMA                : 
DQ_STRING            : 18
FUNKTSIYASI          : 21
NAME                 : 7 20 21 22
NUMBER               : 17
PASS                 : 6
SEMICOLON            : 4 5
SQ_STRING            : 19
UCHUN                : 
YUGUR                : 22
^                    : 13
error                : 
{                    : 23
}                    : 23

Nonterminals, with rules where they appear

expression           : 7 8 9 9 10 10 11 11 12 12 13 13 14 15 16
program              : 0
simple_statement     : 4
statement            : 2 3
statement_block      : 21
statement_list       : 1 2 23

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . statement_list
    (2) statement_list -> . statement_list statement
    (3) statement_list -> . statement
    (4) statement -> . simple_statement SEMICOLON
    (5) statement -> . SEMICOLON
    (21) statement -> . FUNKTSIYASI NAME statement_block
    (22) statement -> . YUGUR NAME
    (6) simple_statement -> . PASS
    (7) simple_statement -> . NAME = expression
    (8) simple_statement -> . AYT ( expression )

    SEMICOLON       shift and go to state 5
    FUNKTSIYASI     shift and go to state 6
    YUGUR           shift and go to state 8
    PASS            shift and go to state 9
    NAME            shift and go to state 7
    AYT             shift and go to state 10

    program                        shift and go to state 1
    statement_list                 shift and go to state 2
    statement                      shift and go to state 3
    simple_statement               shift and go to state 4

state 1

    (0) S' -> program .



state 2

    (1) program -> statement_list .
    (2) statement_list -> statement_list . statement
    (4) statement -> . simple_statement SEMICOLON
    (5) statement -> . SEMICOLON
    (21) statement -> . FUNKTSIYASI NAME statement_block
    (22) statement -> . YUGUR NAME
    (6) simple_statement -> . PASS
    (7) simple_statement -> . NAME = expression
    (8) simple_statement -> . AYT ( expression )

    $end            reduce using rule 1 (program -> statement_list .)
    SEMICOLON       shift and go to state 5
    FUNKTSIYASI     shift and go to state 6
    YUGUR           shift and go to state 8
    PASS            shift and go to state 9
    NAME            shift and go to state 7
    AYT             shift and go to state 10

    statement                      shift and go to state 11
    simple_statement               shift and go to state 4

state 3

    (3) statement_list -> statement .

    SEMICOLON       reduce using rule 3 (statement_list -> statement .)
    FUNKTSIYASI     reduce using rule 3 (statement_list -> statement .)
    YUGUR           reduce using rule 3 (statement_list -> statement .)
    PASS            reduce using rule 3 (statement_list -> statement .)
    NAME            reduce using rule 3 (statement_list -> statement .)
    AYT             reduce using rule 3 (statement_list -> statement .)
    $end            reduce using rule 3 (statement_list -> statement .)
    }               reduce using rule 3 (statement_list -> statement .)


state 4

    (4) statement -> simple_statement . SEMICOLON

    SEMICOLON       shift and go to state 12


state 5

    (5) statement -> SEMICOLON .

    SEMICOLON       reduce using rule 5 (statement -> SEMICOLON .)
    FUNKTSIYASI     reduce using rule 5 (statement -> SEMICOLON .)
    YUGUR           reduce using rule 5 (statement -> SEMICOLON .)
    PASS            reduce using rule 5 (statement -> SEMICOLON .)
    NAME            reduce using rule 5 (statement -> SEMICOLON .)
    AYT             reduce using rule 5 (statement -> SEMICOLON .)
    $end            reduce using rule 5 (statement -> SEMICOLON .)
    }               reduce using rule 5 (statement -> SEMICOLON .)


state 6

    (21) statement -> FUNKTSIYASI . NAME statement_block

    NAME            shift and go to state 13


state 7

    (7) simple_statement -> NAME . = expression

    =               shift and go to state 14


state 8

    (22) statement -> YUGUR . NAME

    NAME            shift and go to state 15


state 9

    (6) simple_statement -> PASS .

    SEMICOLON       reduce using rule 6 (simple_statement -> PASS .)


state 10

    (8) simple_statement -> AYT . ( expression )

    (               shift and go to state 16


state 11

    (2) statement_list -> statement_list statement .

    SEMICOLON       reduce using rule 2 (statement_list -> statement_list statement .)
    FUNKTSIYASI     reduce using rule 2 (statement_list -> statement_list statement .)
    YUGUR           reduce using rule 2 (statement_list -> statement_list statement .)
    PASS            reduce using rule 2 (statement_list -> statement_list statement .)
    NAME            reduce using rule 2 (statement_list -> statement_list statement .)
    AYT             reduce using rule 2 (statement_list -> statement_list statement .)
    $end            reduce using rule 2 (statement_list -> statement_list statement .)
    }               reduce using rule 2 (statement_list -> statement_list statement .)


state 12

    (4) statement -> simple_statement SEMICOLON .

    SEMICOLON       reduce using rule 4 (statement -> simple_statement SEMICOLON .)
    FUNKTSIYASI     reduce using rule 4 (statement -> simple_statement SEMICOLON .)
    YUGUR           reduce using rule 4 (statement -> simple_statement SEMICOLON .)
    PASS            reduce using rule 4 (statement -> simple_statement SEMICOLON .)
    NAME            reduce using rule 4 (statement -> simple_statement SEMICOLON .)
    AYT             reduce using rule 4 (statement -> simple_statement SEMICOLON .)
    $end            reduce using rule 4 (statement -> simple_statement SEMICOLON .)
    }               reduce using rule 4 (statement -> simple_statement SEMICOLON .)


state 13

    (21) statement -> FUNKTSIYASI NAME . statement_block
    (23) statement_block -> . { statement_list }

    {               shift and go to state 18

    statement_block                shift and go to state 17

state 14

    (7) simple_statement -> NAME = . expression
    (9) expression -> . expression + expression
    (10) expression -> . expression - expression
    (11) expression -> . expression * expression
    (12) expression -> . expression / expression
    (13) expression -> . expression ^ expression
    (14) expression -> . - expression
    (15) expression -> . + expression
    (16) expression -> . ( expression )
    (17) expression -> . NUMBER
    (18) expression -> . DQ_STRING
    (19) expression -> . SQ_STRING
    (20) expression -> . NAME

    -               shift and go to state 22
    +               shift and go to state 21
    (               shift and go to state 23
    NUMBER          shift and go to state 24
    DQ_STRING       shift and go to state 25
    SQ_STRING       shift and go to state 26
    NAME            shift and go to state 19

    expression                     shift and go to state 20

state 15

    (22) statement -> YUGUR NAME .

    SEMICOLON       reduce using rule 22 (statement -> YUGUR NAME .)
    FUNKTSIYASI     reduce using rule 22 (statement -> YUGUR NAME .)
    YUGUR           reduce using rule 22 (statement -> YUGUR NAME .)
    PASS            reduce using rule 22 (statement -> YUGUR NAME .)
    NAME            reduce using rule 22 (statement -> YUGUR NAME .)
    AYT             reduce using rule 22 (statement -> YUGUR NAME .)
    $end            reduce using rule 22 (statement -> YUGUR NAME .)
    }               reduce using rule 22 (statement -> YUGUR NAME .)


state 16

    (8) simple_statement -> AYT ( . expression )
    (9) expression -> . expression + expression
    (10) expression -> . expression - expression
    (11) expression -> . expression * expression
    (12) expression -> . expression / expression
    (13) expression -> . expression ^ expression
    (14) expression -> . - expression
    (15) expression -> . + expression
    (16) expression -> . ( expression )
    (17) expression -> . NUMBER
    (18) expression -> . DQ_STRING
    (19) expression -> . SQ_STRING
    (20) expression -> . NAME

    -               shift and go to state 22
    +               shift and go to state 21
    (               shift and go to state 23
    NUMBER          shift and go to state 24
    DQ_STRING       shift and go to state 25
    SQ_STRING       shift and go to state 26
    NAME            shift and go to state 19

    expression                     shift and go to state 27

state 17

    (21) statement -> FUNKTSIYASI NAME statement_block .

    SEMICOLON       reduce using rule 21 (statement -> FUNKTSIYASI NAME statement_block .)
    FUNKTSIYASI     reduce using rule 21 (statement -> FUNKTSIYASI NAME statement_block .)
    YUGUR           reduce using rule 21 (statement -> FUNKTSIYASI NAME statement_block .)
    PASS            reduce using rule 21 (statement -> FUNKTSIYASI NAME statement_block .)
    NAME            reduce using rule 21 (statement -> FUNKTSIYASI NAME statement_block .)
    AYT             reduce using rule 21 (statement -> FUNKTSIYASI NAME statement_block .)
    $end            reduce using rule 21 (statement -> FUNKTSIYASI NAME statement_block .)
    }               reduce using rule 21 (statement -> FUNKTSIYASI NAME statement_block .)


state 18

    (23) statement_block -> { . statement_list }
    (2) statement_list -> . statement_list statement
    (3) statement_list -> . statement
    (4) statement -> . simple_statement SEMICOLON
    (5) statement -> . SEMICOLON
    (21) statement -> . FUNKTSIYASI NAME statement_block
    (22) statement -> . YUGUR NAME
    (6) simple_statement -> . PASS
    (7) simple_statement -> . NAME = expression
    (8) simple_statement -> . AYT ( expression )

    SEMICOLON       shift and go to state 5
    FUNKTSIYASI     shift and go to state 6
    YUGUR           shift and go to state 8
    PASS            shift and go to state 9
    NAME            shift and go to state 7
    AYT             shift and go to state 10

    statement_list                 shift and go to state 28
    statement                      shift and go to state 3
    simple_statement               shift and go to state 4

state 19

    (20) expression -> NAME .

    +               reduce using rule 20 (expression -> NAME .)
    -               reduce using rule 20 (expression -> NAME .)
    *               reduce using rule 20 (expression -> NAME .)
    /               reduce using rule 20 (expression -> NAME .)
    ^               reduce using rule 20 (expression -> NAME .)
    SEMICOLON       reduce using rule 20 (expression -> NAME .)
    )               reduce using rule 20 (expression -> NAME .)


state 20

    (7) simple_statement -> NAME = expression .
    (9) expression -> expression . + expression
    (10) expression -> expression . - expression
    (11) expression -> expression . * expression
    (12) expression -> expression . / expression
    (13) expression -> expression . ^ expression

    SEMICOLON       reduce using rule 7 (simple_statement -> NAME = expression .)
    +               shift and go to state 29
    -               shift and go to state 30
    *               shift and go to state 31
    /               shift and go to state 32
    ^               shift and go to state 33


state 21

    (15) expression -> + . expression
    (9) expression -> . expression + expression
    (10) expression -> . expression - expression
    (11) expression -> . expression * expression
    (12) expression -> . expression / expression
    (13) expression -> . expression ^ expression
    (14) expression -> . - expression
    (15) expression -> . + expression
    (16) expression -> . ( expression )
    (17) expression -> . NUMBER
    (18) expression -> . DQ_STRING
    (19) expression -> . SQ_STRING
    (20) expression -> . NAME

    -               shift and go to state 22
    +               shift and go to state 21
    (               shift and go to state 23
    NUMBER          shift and go to state 24
    DQ_STRING       shift and go to state 25
    SQ_STRING       shift and go to state 26
    NAME            shift and go to state 19

    expression                     shift and go to state 34

state 22

    (14) expression -> - . expression
    (9) expression -> . expression + expression
    (10) expression -> . expression - expression
    (11) expression -> . expression * expression
    (12) expression -> . expression / expression
    (13) expression -> . expression ^ expression
    (14) expression -> . - expression
    (15) expression -> . + expression
    (16) expression -> . ( expression )
    (17) expression -> . NUMBER
    (18) expression -> . DQ_STRING
    (19) expression -> . SQ_STRING
    (20) expression -> . NAME

    -               shift and go to state 22
    +               shift and go to state 21
    (               shift and go to state 23
    NUMBER          shift and go to state 24
    DQ_STRING       shift and go to state 25
    SQ_STRING       shift and go to state 26
    NAME            shift and go to state 19

    expression                     shift and go to state 35

state 23

    (16) expression -> ( . expression )
    (9) expression -> . expression + expression
    (10) expression -> . expression - expression
    (11) expression -> . expression * expression
    (12) expression -> . expression / expression
    (13) expression -> . expression ^ expression
    (14) expression -> . - expression
    (15) expression -> . + expression
    (16) expression -> . ( expression )
    (17) expression -> . NUMBER
    (18) expression -> . DQ_STRING
    (19) expression -> . SQ_STRING
    (20) expression -> . NAME

    -               shift and go to state 22
    +               shift and go to state 21
    (               shift and go to state 23
    NUMBER          shift and go to state 24
    DQ_STRING       shift and go to state 25
    SQ_STRING       shift and go to state 26
    NAME            shift and go to state 19

    expression                     shift and go to state 36

state 24

    (17) expression -> NUMBER .

    +               reduce using rule 17 (expression -> NUMBER .)
    -               reduce using rule 17 (expression -> NUMBER .)
    *               reduce using rule 17 (expression -> NUMBER .)
    /               reduce using rule 17 (expression -> NUMBER .)
    ^               reduce using rule 17 (expression -> NUMBER .)
    SEMICOLON       reduce using rule 17 (expression -> NUMBER .)
    )               reduce using rule 17 (expression -> NUMBER .)


state 25

    (18) expression -> DQ_STRING .

    +               reduce using rule 18 (expression -> DQ_STRING .)
    -               reduce using rule 18 (expression -> DQ_STRING .)
    *               reduce using rule 18 (expression -> DQ_STRING .)
    /               reduce using rule 18 (expression -> DQ_STRING .)
    ^               reduce using rule 18 (expression -> DQ_STRING .)
    SEMICOLON       reduce using rule 18 (expression -> DQ_STRING .)
    )               reduce using rule 18 (expression -> DQ_STRING .)


state 26

    (19) expression -> SQ_STRING .

    +               reduce using rule 19 (expression -> SQ_STRING .)
    -               reduce using rule 19 (expression -> SQ_STRING .)
    *               reduce using rule 19 (expression -> SQ_STRING .)
    /               reduce using rule 19 (expression -> SQ_STRING .)
    ^               reduce using rule 19 (expression -> SQ_STRING .)
    SEMICOLON       reduce using rule 19 (expression -> SQ_STRING .)
    )               reduce using rule 19 (expression -> SQ_STRING .)


state 27

    (8) simple_statement -> AYT ( expression . )
    (9) expression -> expression . + expression
    (10) expression -> expression . - expression
    (11) expression -> expression . * expression
    (12) expression -> expression . / expression
    (13) expression -> expression . ^ expression

    )               shift and go to state 37
    +               shift and go to state 29
    -               shift and go to state 30
    *               shift and go to state 31
    /               shift and go to state 32
    ^               shift and go to state 33


state 28

    (23) statement_block -> { statement_list . }
    (2) statement_list -> statement_list . statement
    (4) statement -> . simple_statement SEMICOLON
    (5) statement -> . SEMICOLON
    (21) statement -> . FUNKTSIYASI NAME statement_block
    (22) statement -> . YUGUR NAME
    (6) simple_statement -> . PASS
    (7) simple_statement -> . NAME = expression
    (8) simple_statement -> . AYT ( expression )

    }               shift and go to state 38
    SEMICOLON       shift and go to state 5
    FUNKTSIYASI     shift and go to state 6
    YUGUR           shift and go to state 8
    PASS            shift and go to state 9
    NAME            shift and go to state 7
    AYT             shift and go to state 10

    statement                      shift and go to state 11
    simple_statement               shift and go to state 4

state 29

    (9) expression -> expression + . expression
    (9) expression -> . expression + expression
    (10) expression -> . expression - expression
    (11) expression -> . expression * expression
    (12) expression -> . expression / expression
    (13) expression -> . expression ^ expression
    (14) expression -> . - expression
    (15) expression -> . + expression
    (16) expression -> . ( expression )
    (17) expression -> . NUMBER
    (18) expression -> . DQ_STRING
    (19) expression -> . SQ_STRING
    (20) expression -> . NAME

    -               shift and go to state 22
    +               shift and go to state 21
    (               shift and go to state 23
    NUMBER          shift and go to state 24
    DQ_STRING       shift and go to state 25
    SQ_STRING       shift and go to state 26
    NAME            shift and go to state 19

    expression                     shift and go to state 39

state 30

    (10) expression -> expression - . expression
    (9) expression -> . expression + expression
    (10) expression -> . expression - expression
    (11) expression -> . expression * expression
    (12) expression -> . expression / expression
    (13) expression -> . expression ^ expression
    (14) expression -> . - expression
    (15) expression -> . + expression
    (16) expression -> . ( expression )
    (17) expression -> . NUMBER
    (18) expression -> . DQ_STRING
    (19) expression -> . SQ_STRING
    (20) expression -> . NAME

    -               shift and go to state 22
    +               shift and go to state 21
    (               shift and go to state 23
    NUMBER          shift and go to state 24
    DQ_STRING       shift and go to state 25
    SQ_STRING       shift and go to state 26
    NAME            shift and go to state 19

    expression                     shift and go to state 40

state 31

    (11) expression -> expression * . expression
    (9) expression -> . expression + expression
    (10) expression -> . expression - expression
    (11) expression -> . expression * expression
    (12) expression -> . expression / expression
    (13) expression -> . expression ^ expression
    (14) expression -> . - expression
    (15) expression -> . + expression
    (16) expression -> . ( expression )
    (17) expression -> . NUMBER
    (18) expression -> . DQ_STRING
    (19) expression -> . SQ_STRING
    (20) expression -> . NAME

    -               shift and go to state 22
    +               shift and go to state 21
    (               shift and go to state 23
    NUMBER          shift and go to state 24
    DQ_STRING       shift and go to state 25
    SQ_STRING       shift and go to state 26
    NAME            shift and go to state 19

    expression                     shift and go to state 41

state 32

    (12) expression -> expression / . expression
    (9) expression -> . expression + expression
    (10) expression -> . expression - expression
    (11) expression -> . expression * expression
    (12) expression -> . expression / expression
    (13) expression -> . expression ^ expression
    (14) expression -> . - expression
    (15) expression -> . + expression
    (16) expression -> . ( expression )
    (17) expression -> . NUMBER
    (18) expression -> . DQ_STRING
    (19) expression -> . SQ_STRING
    (20) expression -> . NAME

    -               shift and go to state 22
    +               shift and go to state 21
    (               shift and go to state 23
    NUMBER          shift and go to state 24
    DQ_STRING       shift and go to state 25
    SQ_STRING       shift and go to state 26
    NAME            shift and go to state 19

    expression                     shift and go to state 42

state 33

    (13) expression -> expression ^ . expression
    (9) expression -> . expression + expression
    (10) expression -> . expression - expression
    (11) expression -> . expression * expression
    (12) expression -> . expression / expression
    (13) expression -> . expression ^ expression
    (14) expression -> . - expression
    (15) expression -> . + expression
    (16) expression -> . ( expression )
    (17) expression -> . NUMBER
    (18) expression -> . DQ_STRING
    (19) expression -> . SQ_STRING
    (20) expression -> . NAME

    -               shift and go to state 22
    +               shift and go to state 21
    (               shift and go to state 23
    NUMBER          shift and go to state 24
    DQ_STRING       shift and go to state 25
    SQ_STRING       shift and go to state 26
    NAME            shift and go to state 19

    expression                     shift and go to state 43

state 34

    (15) expression -> + expression .
    (9) expression -> expression . + expression
    (10) expression -> expression . - expression
    (11) expression -> expression . * expression
    (12) expression -> expression . / expression
    (13) expression -> expression . ^ expression

    +               reduce using rule 15 (expression -> + expression .)
    -               reduce using rule 15 (expression -> + expression .)
    *               reduce using rule 15 (expression -> + expression .)
    /               reduce using rule 15 (expression -> + expression .)
    ^               reduce using rule 15 (expression -> + expression .)
    SEMICOLON       reduce using rule 15 (expression -> + expression .)
    )               reduce using rule 15 (expression -> + expression .)

  ! +               [ shift and go to state 29 ]
  ! -               [ shift and go to state 30 ]
  ! *               [ shift and go to state 31 ]
  ! /               [ shift and go to state 32 ]
  ! ^               [ shift and go to state 33 ]


state 35

    (14) expression -> - expression .
    (9) expression -> expression . + expression
    (10) expression -> expression . - expression
    (11) expression -> expression . * expression
    (12) expression -> expression . / expression
    (13) expression -> expression . ^ expression

    +               reduce using rule 14 (expression -> - expression .)
    -               reduce using rule 14 (expression -> - expression .)
    *               reduce using rule 14 (expression -> - expression .)
    /               reduce using rule 14 (expression -> - expression .)
    ^               reduce using rule 14 (expression -> - expression .)
    SEMICOLON       reduce using rule 14 (expression -> - expression .)
    )               reduce using rule 14 (expression -> - expression .)

  ! +               [ shift and go to state 29 ]
  ! -               [ shift and go to state 30 ]
  ! *               [ shift and go to state 31 ]
  ! /               [ shift and go to state 32 ]
  ! ^               [ shift and go to state 33 ]


state 36

    (16) expression -> ( expression . )
    (9) expression -> expression . + expression
    (10) expression -> expression . - expression
    (11) expression -> expression . * expression
    (12) expression -> expression . / expression
    (13) expression -> expression . ^ expression

    )               shift and go to state 44
    +               shift and go to state 29
    -               shift and go to state 30
    *               shift and go to state 31
    /               shift and go to state 32
    ^               shift and go to state 33


state 37

    (8) simple_statement -> AYT ( expression ) .

    SEMICOLON       reduce using rule 8 (simple_statement -> AYT ( expression ) .)


state 38

    (23) statement_block -> { statement_list } .

    SEMICOLON       reduce using rule 23 (statement_block -> { statement_list } .)
    FUNKTSIYASI     reduce using rule 23 (statement_block -> { statement_list } .)
    YUGUR           reduce using rule 23 (statement_block -> { statement_list } .)
    PASS            reduce using rule 23 (statement_block -> { statement_list } .)
    NAME            reduce using rule 23 (statement_block -> { statement_list } .)
    AYT             reduce using rule 23 (statement_block -> { statement_list } .)
    $end            reduce using rule 23 (statement_block -> { statement_list } .)
    }               reduce using rule 23 (statement_block -> { statement_list } .)


state 39

    (9) expression -> expression + expression .
    (9) expression -> expression . + expression
    (10) expression -> expression . - expression
    (11) expression -> expression . * expression
    (12) expression -> expression . / expression
    (13) expression -> expression . ^ expression

    +               reduce using rule 9 (expression -> expression + expression .)
    -               reduce using rule 9 (expression -> expression + expression .)
    SEMICOLON       reduce using rule 9 (expression -> expression + expression .)
    )               reduce using rule 9 (expression -> expression + expression .)
    *               shift and go to state 31
    /               shift and go to state 32
    ^               shift and go to state 33

  ! *               [ reduce using rule 9 (expression -> expression + expression .) ]
  ! /               [ reduce using rule 9 (expression -> expression + expression .) ]
  ! ^               [ reduce using rule 9 (expression -> expression + expression .) ]
  ! +               [ shift and go to state 29 ]
  ! -               [ shift and go to state 30 ]


state 40

    (10) expression -> expression - expression .
    (9) expression -> expression . + expression
    (10) expression -> expression . - expression
    (11) expression -> expression . * expression
    (12) expression -> expression . / expression
    (13) expression -> expression . ^ expression

    +               reduce using rule 10 (expression -> expression - expression .)
    -               reduce using rule 10 (expression -> expression - expression .)
    SEMICOLON       reduce using rule 10 (expression -> expression - expression .)
    )               reduce using rule 10 (expression -> expression - expression .)
    *               shift and go to state 31
    /               shift and go to state 32
    ^               shift and go to state 33

  ! *               [ reduce using rule 10 (expression -> expression - expression .) ]
  ! /               [ reduce using rule 10 (expression -> expression - expression .) ]
  ! ^               [ reduce using rule 10 (expression -> expression - expression .) ]
  ! +               [ shift and go to state 29 ]
  ! -               [ shift and go to state 30 ]


state 41

    (11) expression -> expression * expression .
    (9) expression -> expression . + expression
    (10) expression -> expression . - expression
    (11) expression -> expression . * expression
    (12) expression -> expression . / expression
    (13) expression -> expression . ^ expression

    +               reduce using rule 11 (expression -> expression * expression .)
    -               reduce using rule 11 (expression -> expression * expression .)
    *               reduce using rule 11 (expression -> expression * expression .)
    /               reduce using rule 11 (expression -> expression * expression .)
    SEMICOLON       reduce using rule 11 (expression -> expression * expression .)
    )               reduce using rule 11 (expression -> expression * expression .)
    ^               shift and go to state 33

  ! ^               [ reduce using rule 11 (expression -> expression * expression .) ]
  ! +               [ shift and go to state 29 ]
  ! -               [ shift and go to state 30 ]
  ! *               [ shift and go to state 31 ]
  ! /               [ shift and go to state 32 ]


state 42

    (12) expression -> expression / expression .
    (9) expression -> expression . + expression
    (10) expression -> expression . - expression
    (11) expression -> expression . * expression
    (12) expression -> expression . / expression
    (13) expression -> expression . ^ expression

    +               reduce using rule 12 (expression -> expression / expression .)
    -               reduce using rule 12 (expression -> expression / expression .)
    *               reduce using rule 12 (expression -> expression / expression .)
    /               reduce using rule 12 (expression -> expression / expression .)
    SEMICOLON       reduce using rule 12 (expression -> expression / expression .)
    )               reduce using rule 12 (expression -> expression / expression .)
    ^               shift and go to state 33

  ! ^               [ reduce using rule 12 (expression -> expression / expression .) ]
  ! +               [ shift and go to state 29 ]
  ! -               [ shift and go to state 30 ]
  ! *               [ shift and go to state 31 ]
  ! /               [ shift and go to state 32 ]


state 43

    (13) expression -> expression ^ expression .
    (9) expression -> expression . + expression
    (10) expression -> expression . - expression
    (11) expression -> expression . * expression
    (12) expression -> expression . / expression
    (13) expression -> expression . ^ expression

    +               reduce using rule 13 (expression -> expression ^ expression .)
    -               reduce using rule 13 (expression -> expression ^ expression .)
    *               reduce using rule 13 (expression -> expression ^ expression .)
    /               reduce using rule 13 (expression -> expression ^ expression .)
    ^               reduce using rule 13 (expression -> expression ^ expression .)
    SEMICOLON       reduce using rule 13 (expression -> expression ^ expression .)
    )               reduce using rule 13 (expression -> expression ^ expression .)

  ! +               [ shift and go to state 29 ]
  ! -               [ shift and go to state 30 ]
  ! *               [ shift and go to state 31 ]
  ! /               [ shift and go to state 32 ]
  ! ^               [ shift and go to state 33 ]


state 44

    (16) expression -> ( expression ) .

    +               reduce using rule 16 (expression -> ( expression ) .)
    -               reduce using rule 16 (expression -> ( expression ) .)
    *               reduce using rule 16 (expression -> ( expression ) .)
    /               reduce using rule 16 (expression -> ( expression ) .)
    ^               reduce using rule 16 (expression -> ( expression ) .)
    SEMICOLON       reduce using rule 16 (expression -> ( expression ) .)
    )               reduce using rule 16 (expression -> ( expression ) .)

