
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'programleft+-left*/left^rightUMINUSUPOSITIVEDQ_STRING NAME NUMBER PASS SAY SEMICOLON SQ_STRINGprogram : statement_liststatement_list : statement_list statementstatement_list : statementstatement : simple_statement SEMICOLONstatement : SEMICOLONsimple_statement : PASSsimple_statement : NAME "=" expressionsimple_statement : SAY \'(\' expression \')\'expression : expression \'+\' expression\n                  | expression \'-\' expression\n                  | expression \'*\' expression\n                  | expression \'/\' expression\n                  | expression \'^\' expressionexpression : \'-\' expression %prec UMINUSexpression : \'+\' expression %prec UPOSITIVEexpression : \'(\' expression \')\'expression : NUMBERexpression : DQ_STRINGexpression : SQ_STRINGexpression : NAME'
    
_lr_action_items = {'SEMICOLON':([0,2,3,4,5,6,9,10,13,14,18,19,20,27,28,30,31,32,33,34,35,36,],[5,5,-3,10,-5,-6,-2,-4,-20,-7,-17,-18,-19,-15,-14,-8,-9,-10,-11,-12,-13,-16,]),'PASS':([0,2,3,5,9,10,],[6,6,-3,-5,-2,-4,]),'NAME':([0,2,3,5,9,10,11,12,15,16,17,22,23,24,25,26,],[7,7,-3,-5,-2,-4,13,13,13,13,13,13,13,13,13,13,]),'SAY':([0,2,3,5,9,10,],[8,8,-3,-5,-2,-4,]),'$end':([1,2,3,5,9,10,],[0,-1,-3,-5,-2,-4,]),'=':([7,],[11,]),'(':([8,11,12,15,16,17,22,23,24,25,26,],[12,17,17,17,17,17,17,17,17,17,17,]),'-':([11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,31,32,33,34,35,36,],[16,16,-20,23,16,16,16,-17,-18,-19,23,16,16,16,16,16,-15,-14,23,-9,-10,-11,-12,-13,-16,]),'+':([11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,31,32,33,34,35,36,],[15,15,-20,22,15,15,15,-17,-18,-19,22,15,15,15,15,15,-15,-14,22,-9,-10,-11,-12,-13,-16,]),'NUMBER':([11,12,15,16,17,22,23,24,25,26,],[18,18,18,18,18,18,18,18,18,18,]),'DQ_STRING':([11,12,15,16,17,22,23,24,25,26,],[19,19,19,19,19,19,19,19,19,19,]),'SQ_STRING':([11,12,15,16,17,22,23,24,25,26,],[20,20,20,20,20,20,20,20,20,20,]),'*':([13,14,18,19,20,21,27,28,29,31,32,33,34,35,36,],[-20,24,-17,-18,-19,24,-15,-14,24,24,24,-11,-12,-13,-16,]),'/':([13,14,18,19,20,21,27,28,29,31,32,33,34,35,36,],[-20,25,-17,-18,-19,25,-15,-14,25,25,25,-11,-12,-13,-16,]),'^':([13,14,18,19,20,21,27,28,29,31,32,33,34,35,36,],[-20,26,-17,-18,-19,26,-15,-14,26,26,26,26,26,-13,-16,]),')':([13,18,19,20,21,27,28,29,31,32,33,34,35,36,],[-20,-17,-18,-19,30,-15,-14,36,-9,-10,-11,-12,-13,-16,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statement_list':([0,],[2,]),'statement':([0,2,],[3,9,]),'simple_statement':([0,2,],[4,4,]),'expression':([11,12,15,16,17,22,23,24,25,26,],[14,21,27,28,29,31,32,33,34,35,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','mini.py',169),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list2','mini.py',175),
  ('statement_list -> statement','statement_list',1,'p_statement_list','mini.py',180),
  ('statement -> simple_statement SEMICOLON','statement',2,'p_statement_no_comment','mini.py',190),
  ('statement -> SEMICOLON','statement',1,'p_statement_no_code_no_comment','mini.py',195),
  ('simple_statement -> PASS','simple_statement',1,'p_simple_statement_pass','mini.py',201),
  ('simple_statement -> NAME = expression','simple_statement',3,'p_simple_statement_assign','mini.py',206),
  ('simple_statement -> SAY ( expression )','simple_statement',4,'p_simple_statement_say','mini.py',211),
  ('expression -> expression + expression','expression',3,'p_expression_binop','mini.py',217),
  ('expression -> expression - expression','expression',3,'p_expression_binop','mini.py',218),
  ('expression -> expression * expression','expression',3,'p_expression_binop','mini.py',219),
  ('expression -> expression / expression','expression',3,'p_expression_binop','mini.py',220),
  ('expression -> expression ^ expression','expression',3,'p_expression_binop','mini.py',221),
  ('expression -> - expression','expression',2,'p_expression_uminus','mini.py',227),
  ('expression -> + expression','expression',2,'p_expression_upositive','mini.py',233),
  ('expression -> ( expression )','expression',3,'p_expression_group','mini.py',238),
  ('expression -> NUMBER','expression',1,'p_expression_number','mini.py',243),
  ('expression -> DQ_STRING','expression',1,'p_expression_dq_string','mini.py',255),
  ('expression -> SQ_STRING','expression',1,'p_expression_sq_string','mini.py',260),
  ('expression -> NAME','expression',1,'p_expression_name','mini.py',265),
]
