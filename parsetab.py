
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'programleft+-left*/left^rightUMINUSUPOSITIVEDQ_STRING NAME NUMBER PASS SEMICOLON SQ_STRINGprogram : statement_liststatement_list : statement_list statementstatement_list : statementstatement : simple_statement SEMICOLONstatement : SEMICOLONsimple_statement : PASSsimple_statement : NAME "=" expressionexpression : expression \'+\' expression\n                  | expression \'-\' expression\n                  | expression \'*\' expression\n                  | expression \'/\' expression\n                  | expression \'^\' expressionexpression : \'-\' expression %prec UMINUSexpression : \'+\' expression %prec UPOSITIVEexpression : \'(\' expression \')\'expression : NUMBERexpression : DQ_STRINGexpression : SQ_STRINGexpression : NAME'
    
_lr_action_items = {'SEMICOLON':([0,2,3,4,5,6,8,9,11,12,16,17,18,24,25,27,28,29,30,31,32,],[5,5,-3,9,-5,-6,-2,-4,-19,-7,-16,-17,-18,-14,-13,-8,-9,-10,-11,-12,-15,]),'PASS':([0,2,3,5,8,9,],[6,6,-3,-5,-2,-4,]),'NAME':([0,2,3,5,8,9,10,13,14,15,19,20,21,22,23,],[7,7,-3,-5,-2,-4,11,11,11,11,11,11,11,11,11,]),'$end':([1,2,3,5,8,9,],[0,-1,-3,-5,-2,-4,]),'=':([7,],[10,]),'-':([10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,],[14,-19,20,14,14,14,-16,-17,-18,14,14,14,14,14,-14,-13,20,-8,-9,-10,-11,-12,-15,]),'+':([10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,],[13,-19,19,13,13,13,-16,-17,-18,13,13,13,13,13,-14,-13,19,-8,-9,-10,-11,-12,-15,]),'(':([10,13,14,15,19,20,21,22,23,],[15,15,15,15,15,15,15,15,15,]),'NUMBER':([10,13,14,15,19,20,21,22,23,],[16,16,16,16,16,16,16,16,16,]),'DQ_STRING':([10,13,14,15,19,20,21,22,23,],[17,17,17,17,17,17,17,17,17,]),'SQ_STRING':([10,13,14,15,19,20,21,22,23,],[18,18,18,18,18,18,18,18,18,]),'*':([11,12,16,17,18,24,25,26,27,28,29,30,31,32,],[-19,21,-16,-17,-18,-14,-13,21,21,21,-10,-11,-12,-15,]),'/':([11,12,16,17,18,24,25,26,27,28,29,30,31,32,],[-19,22,-16,-17,-18,-14,-13,22,22,22,-10,-11,-12,-15,]),'^':([11,12,16,17,18,24,25,26,27,28,29,30,31,32,],[-19,23,-16,-17,-18,-14,-13,23,23,23,23,23,-12,-15,]),')':([11,16,17,18,24,25,26,27,28,29,30,31,32,],[-19,-16,-17,-18,-14,-13,32,-8,-9,-10,-11,-12,-15,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statement_list':([0,],[2,]),'statement':([0,2,],[3,8,]),'simple_statement':([0,2,],[4,4,]),'expression':([10,13,14,15,19,20,21,22,23,],[12,24,25,26,27,28,29,30,31,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','mini.py',156),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list2','mini.py',162),
  ('statement_list -> statement','statement_list',1,'p_statement_list','mini.py',167),
  ('statement -> simple_statement SEMICOLON','statement',2,'p_statement_no_comment','mini.py',177),
  ('statement -> SEMICOLON','statement',1,'p_statement_no_code_no_comment','mini.py',182),
  ('simple_statement -> PASS','simple_statement',1,'p_simple_statement_pass','mini.py',188),
  ('simple_statement -> NAME = expression','simple_statement',3,'p_simple_statement_assign','mini.py',193),
  ('expression -> expression + expression','expression',3,'p_expression_binop','mini.py',199),
  ('expression -> expression - expression','expression',3,'p_expression_binop','mini.py',200),
  ('expression -> expression * expression','expression',3,'p_expression_binop','mini.py',201),
  ('expression -> expression / expression','expression',3,'p_expression_binop','mini.py',202),
  ('expression -> expression ^ expression','expression',3,'p_expression_binop','mini.py',203),
  ('expression -> - expression','expression',2,'p_expression_uminus','mini.py',209),
  ('expression -> + expression','expression',2,'p_expression_upositive','mini.py',215),
  ('expression -> ( expression )','expression',3,'p_expression_group','mini.py',220),
  ('expression -> NUMBER','expression',1,'p_expression_number','mini.py',225),
  ('expression -> DQ_STRING','expression',1,'p_expression_dq_string','mini.py',230),
  ('expression -> SQ_STRING','expression',1,'p_expression_sq_string','mini.py',235),
  ('expression -> NAME','expression',1,'p_expression_name','mini.py',240),
]
